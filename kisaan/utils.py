import os
from PIL import Image
import google.generativeai as genai
from django.conf import settings
from .models import UserSubmission  # Import your model


# Configure Gemini API
genai.configure(api_key=settings.GEMINI_API_KEY)

def analyze_with_gemini(image_path=None):
    """
    Fetch the most recent image from the database and send it to Gemini for plant/tree analysis.
    """
    # Get latest submission
    latest_submission = UserSubmission.objects.order_by('-created_at').first()
    if not latest_submission or not latest_submission.image:
        return "No recent image found."

    image_path = latest_submission.image.path

    # Gemini model
    model = genai.GenerativeModel("gemini-1.5-flash")

    # Custom plant/tree analysis prompt
    prompt = (
        "You are a plant and tree identification expert.\n"
        "Analyze the image provided and respond ONLY in the following structured Markdown format:\n\n"
        "## ЁЯМ▒ Plant Identification Report\n"
        "**ЁЯУ╖ Identified Species:** [Plant Name] (*Scientific Name*)\n"
        "**ЁЯФН Identification Details:**\n"
        "- Key leaf/bark/flower traits.\n"
        "- Any special identifying features.\n\n"
        "---\n"
        "### 1я╕ПтГг Best Season to Grow\n"
        "- [Season details]\n\n"
        "### 2я╕ПтГг Optimal Environmental Conditions\n"
        "| Factor | Ideal Range / Requirement |\n"
        "|--------|----------------------------|\n"
        "| **Temperature** | [value] |\n"
        "| **Soil Type** | [value] |\n"
        "| **Humidity** | [value] |\n"
        "| **Sunlight** | [value] |\n\n"
        "### 3я╕ПтГг Disease Check\n"
        "- Current Image Status: [Healthy / Diseased]\n"
        "- Common Diseases List\n\n"
        "### 4я╕ПтГг Recovery & Treatment Methods\n"
        "| Issue | Solution |\n"
        "|-------|----------|\n"
        "| Root Rot | [treatment] |\n"
        "| Leaf Spot | [treatment] |\n"
        "| Powdery Mildew | [treatment] |\n"
        "| Insect Pests | [treatment] |\n\n"
        "**тЪая╕П Note:**\n"
        "This analysis is based solely on the provided image. For accurate diagnosis, consult a local arborist.\n\n\n\n"
    
        "рдЖрдк рдПрдХ рдкреМрдзреЛрдВ рдФрд░ рд╡реГрдХреНрд╖реЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХреЗ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВред\n"
        "рджрд┐рдП рдЧрдП рдЪрд┐рддреНрд░ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ рдФрд░ рдХреЗрд╡рд▓ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рдВрд░рдЪрд┐рдд Markdown рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВ:\n\n"
        "## ЁЯМ▒ рдкреМрдзрд╛ рдкрд╣рдЪрд╛рди рд░рд┐рдкреЛрд░реНрдЯ\n"
        "**ЁЯУ╖ рдкрд╣рдЪрд╛рдиреА рдЧрдИ рдкреНрд░рдЬрд╛рддрд┐:** [рдкреМрдзреЗ рдХрд╛ рдирд╛рдо] (*рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рдирд╛рдо*)\n"
        "**ЁЯФН рдкрд╣рдЪрд╛рди рд╡рд┐рд╡рд░рдг:**\n"
        "- рдкрддреНрддрд┐рдпреЛрдВ/рдЫрд╛рд▓/рдлреВрд▓реЛрдВ рдХреА рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВред\n"
        "- рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдкрд╣рдЪрд╛рди рдЪрд┐рдиреНрд╣ред\n\n"
        "---\n"
        "### 1я╕ПтГг рдЙрдЧрд╛рдиреЗ рдХрд╛ рд╕рд░реНрд╡реЛрддреНрддрдо рдореМрд╕рдо\n"
        "- [рдореМрд╕рдо рдХрд╛ рд╡рд┐рд╡рд░рдг]\n\n"
        "### 2я╕ПтГг рдЖрджрд░реНрд╢ рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпрд╛рдВ\n"
        "| рдХрд╛рд░рдХ | рдЖрджрд░реНрд╢ рд╕реАрдорд╛ / рдЖрд╡рд╢реНрдпрдХрддрд╛ |\n"
        "|-------|------------------------|\n"
        "| **рддрд╛рдкрдорд╛рди** | [рдорд╛рди] |\n"
        "| **рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░** | [рдорд╛рди] |\n"
        "| **рдирдореА** | [рдорд╛рди] |\n"
        "| **рдзреВрдк** | [рдорд╛рди] |\n\n"
        "### 3я╕ПтГг рд░реЛрдЧ рдЬрд╛рдВрдЪ\n"
        "- рд╡рд░реНрддрдорд╛рди рдЪрд┐рддреНрд░ рд╕реНрдерд┐рддрд┐: [рд╕реНрд╡рд╕реНрде / рд░реЛрдЧрдЧреНрд░рд╕реНрдд]\n"
        "- рд╕рд╛рдорд╛рдиреНрдп рд░реЛрдЧреЛрдВ рдХреА рд╕реВрдЪреА\n\n"
        "### 4я╕ПтГг рдкреБрдирд░реНрдкреНрд░рд╛рдкреНрддрд┐ рдФрд░ рдЙрдкрдЪрд╛рд░ рд╡рд┐рдзрд┐рдпрд╛рдВ\n"
        "| рд╕рдорд╕реНрдпрд╛ | рд╕рдорд╛рдзрд╛рди |\n"
        "|--------|---------|\n"
        "| рдЬрдбрд╝ рд╕рдбрд╝рди | [рдЙрдкрдЪрд╛рд░] |\n"
        "| рдкрддреНрддреА рдзрдмреНрдмрд╛ | [рдЙрдкрдЪрд╛рд░] |\n"
        "| рдкрд╛рдЙрдбрд░реА рдлрдлреВрдВрджреА | [рдЙрдкрдЪрд╛рд░] |\n"
        "| рдХреАрдЯ рд╕рдВрдХреНрд░рдордг | [рдЙрдкрдЪрд╛рд░] |\n\n"
        "**тЪая╕П рдиреЛрдЯ:**\n"
        "рдпрд╣ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗрд╡рд▓ рджрд┐рдП рдЧрдП рдЪрд┐рддреНрд░ рдкрд░ рдЖрдзрд╛рд░рд┐рдд рд╣реИред рд╕рдЯреАрдХ рдирд┐рджрд╛рди рдХреЗ рд▓рд┐рдП, рд╕реНрдерд╛рдиреАрдп рд╡реГрдХреНрд╖ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВред"
)   

        

    inputs = [
        prompt,
        {
            "mime_type": "image/jpeg",
            "data": open(image_path, "rb").read()
        }
    ]


    # Get AI response
    response = model.generate_content(inputs)
    return response.text


def process_image(file_path):
    """
    Returns basic image info (size).
    """
    img = Image.open(file_path)
    return img.size
